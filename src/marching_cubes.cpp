#include "erl_geometry/marching_cubes.hpp"

#include "erl_common/grid_map_info.hpp"

#include <absl/container/flat_hash_map.h>

#include <map>
#include <set>

namespace erl::geometry {

    // ref: https://www.cs.carleton.edu/cs_comps/0405/shape/marching_cubes.html
    // 8 vertices, each vertex is either inside or outside.
    // there are 2^8 = 256 possible configurations.
    // given identical triangulations for cubes whose vertex classification is opposite of each
    // other, rotations and mirroring, there are in fact only 14 unique configurations.
    // there are 12 edges. each triangulation contains zero to five triangles.
    // each triangle is a list of 3 edges.
    // the vertex configuration can be represented as an 8-bit number, where each bit is 1 if
    // the vertex is inside the surface, and 0 if it is outside.
    //       v7_______e6_____________v6
    //        /|                    /|
    //       / |                   / |
    //    e7/  |                e5/  |
    //     /___|______e4_________/   |
    //  v4|    |                 |v5 |e10
    //    |    |                 |   |
    //    |    |e11              |e9 |
    //  e8|    |                 |   |
    //    |    |_________________|___|
    //    |   / v3      e2       |   /v2
    //    |  /                   |  /
    //    | /e3                  | /e1
    //    |/_____________________|/
    //    v0         e0          v1

    const int MarchingCubes::kTriangleEdgeIndexTable[256][16] = {
        // each row ends with -1 to indicate the end of the row.
        // vertex config index -> list of edge indices
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
        {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
        {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
        {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
        {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
        {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
        {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
        {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
        {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
        {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
        {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
        {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
        {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
        {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
        {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
        {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
        {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
        {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
        {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
        {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
        {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
        {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
        {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
        {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
        {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
        {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
        {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
        {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
        {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
        {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
        {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
        {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
        {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
        {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
        {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
        {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
        {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
        {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
        {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
        {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
        {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
        {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
        {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
        {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
        {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
        {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
        {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
        {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
        {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
        {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
        {7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
        {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
        {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
        {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
        {9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
        {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
        {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
        {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
        {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
        {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
        {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
        {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
        {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
        {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
        {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
        {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
        {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
        {6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
        {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
        {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
        {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
        {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
        {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
        {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
        {2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
        {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
        {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
        {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
        {1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
        {11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
        {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
        {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
        {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
        {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
        {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
        {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
        {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
        {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
        {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
        {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
        {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
        {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
        {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
        {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
        {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
        {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
        {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
        {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
        {10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
        {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
        {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
        {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
        {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
        {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
        {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
        {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
        {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
        {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
        {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
        {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
        {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
        {3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
        {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
        {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
        {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
        {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
        {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
        {1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
        {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
        {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
        {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
        {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
        {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
        {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
        {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
        {11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
        {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
        {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
        {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
        {1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
        {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
        {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
        {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
        {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
        {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
        {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
        {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
        {7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
        {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
        {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
        {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
        {9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
        {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
        {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
        {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
        {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
        {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
        {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
        {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
        {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
        {0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
        {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
        {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
        {3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
        {5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
        {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
        {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
        {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
        {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
        {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
        {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
        {9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
        {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
        {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
        {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
        {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
        {3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
        {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
        {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
        {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
        {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
        {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
        {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
        {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    };

    const int MarchingCubes::kTriangleCountTable[256] = {
        0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3,
        4, 4, 3, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4,
        4, 3, 4, 5, 5, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4,
        5, 3, 4, 4, 5, 4, 5, 5, 4, 2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3,
        4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2,
        3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5,
        5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4,
        5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
        4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0,
    };

    const int MarchingCubes::kTriangleUniqueEdgeIndexTable[256][14] = {
        // vertex config index -> list of unique edge indices
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 7, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 7, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 7, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 7, 8, 9, 11, -1, -1, -1, -1, -1},
        {1, 2, 4, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 7, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {4, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 8, 9, 10, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 7, 9, 10, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 7, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 7, 8, 11, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 7, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {5, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 6, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 6, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 6, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 6, 8, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 6, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 6, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 6, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 6, 9, 10, 11, -1, -1, -1, -1, -1},
        {1, 2, 5, 6, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 6, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 6, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 6, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 6, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 6, 7, 9, 10, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 6, 7, 9, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 6, 7, 8, 10, 11, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 6, 7, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -1},
        {1, 2, 4, 5, 6, 7, 9, 10, 11, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 6, 7, 8, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 6, 7, 8, 9, 11, -1, -1, -1, -1, -1},
        {4, 5, 6, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 6, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 6, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 6, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 6, 8, 9, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 6, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 6, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 6, 10, 11, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 6, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 6, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 6, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 6, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {6, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 6, 7, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 6, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 6, 7, 9, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 6, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 2, 6, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 6, 7, 8, 10, 11, -1, -1, -1, -1, -1},
        {1, 2, 6, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 6, 7, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 6, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 6, 7, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {6, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 6, 7, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 6, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 6, 7, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 6, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 6, 7, 8, 10, 11, -1, -1, -1, -1, -1},
        {0, 2, 6, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 6, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {2, 3, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 6, 7, 9, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 6, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 6, 7, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {6, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 6, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 6, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 6, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 6, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 6, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 6, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 6, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 6, 8, 9, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 6, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 6, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {4, 6, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 6, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 6, 7, 8, 9, 11, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 6, 7, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 6, 7, 8, 11, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 6, 7, 9, 10, 11, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -1},
        {0, 2, 4, 5, 6, 7, 10, 11, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 6, 7, 8, 10, 11, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 6, 7, 9, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 6, 7, 9, 10, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 6, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 6, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 6, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 6, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 6, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 6, 9, 10, 11, -1, -1, -1, -1, -1},
        {0, 2, 5, 6, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 6, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 6, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 6, 8, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 6, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 6, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 6, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 7, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 7, 8, 11, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 7, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 5, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 5, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 5, 7, 9, 10, -1, -1, -1, -1, -1, -1},
        {1, 2, 5, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 5, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 11, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 5, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 5, 8, 9, 10, -1, -1, -1, -1, -1},
        {1, 2, 4, 5, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 5, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 5, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 5, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 7, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 7, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 7, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 7, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 7, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 7, 8, 9, 11, -1, -1, -1, -1, -1},
        {0, 2, 4, 7, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 7, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 4, 7, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 4, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 4, 7, 10, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 4, 7, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 4, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 4, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 8, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2, 3, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 2, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, 3, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1, 3, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    };

    const int MarchingCubes::kTriangleVertexIndexTable[256][16] = {
        // 24 unique patterns
        // vertex config index -> list of triangle vertex indices
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 2, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern5
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 3, 0, 2, 3, 2, 4, 3, 4, 5, -1, -1, -1, -1},           // pattern9
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 0, 2, 3, 2, 4, 3, 4, 5, -1, -1, -1, -1},           // pattern9
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 2, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern5
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 2, 1, 3, 4, 5, 6, 4, 6, 7, -1, -1, -1, -1},           // pattern15
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 3, 0, 2, 3, 2, 4, 3, 4, 5, -1, -1, -1, -1},           // pattern9
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 2, 1, 3, 4, 5, 6, 4, 6, 7, -1, -1, -1, -1},           // pattern15
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -1, -1, -1},         // pattern18
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 2, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern5
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 2, 1, 3, 4, 5, 6, 4, 6, 7, -1, -1, -1, -1},           // pattern15
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 3, 0, 2, 3, 2, 4, 3, 4, 5, -1, -1, -1, -1},           // pattern9
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 3, 2, 5, -1, -1, -1, -1},           // pattern7
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 1, 0, 3, 4, 1, 3, 5, 4, -1, -1, -1, -1},           // pattern22
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 3, 1, 4, 5, 6, 5, 7, 6, -1, -1, -1, -1},           // pattern23
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern24
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1},        // pattern8
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -1, -1, -1},         // pattern18
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 3, 1, 4, 5, 6, 5, 7, 6, -1, -1, -1, -1},           // pattern23
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 1, 0, 3, 4, 1, 3, 5, 4, -1, -1, -1, -1},           // pattern22
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern2
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1},        // pattern6
        {0, 1, 2, 0, 3, 1, 4, 5, 6, 5, 7, 6, -1, -1, -1, -1},           // pattern23
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern24
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 3, 4, 5, 3, 5, 6, 5, 4, 7, -1, -1, -1, -1},           // pattern11
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 1, 3, -1, -1, -1, -1},           // pattern10
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 3, 1, 0, 3, 4, 1, 3, 5, 4, -1, -1, -1, -1},           // pattern22
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 0, 3, 1, 3, 4, 1, -1, -1, -1, -1, -1, -1, -1},        // pattern4
        {0, 1, 2, 3, 4, 5, 4, 6, 5, 4, 7, 6, -1, -1, -1, -1},           // pattern14
        {0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 3, 2, -1, -1, -1, -1},           // pattern13
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 1, 0, 3, 4, 1, 3, 5, 4, -1, -1, -1, -1},           // pattern22
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 5, 3, 4, 6, 7, 8, -1},              // pattern19
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 0, 3, 1, 0, 4, 3, 3, 5, 1, -1, -1, -1, -1},           // pattern21
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 0, 2, 3, 1, 4, 2, 5, 2, 6, 4, 6, 2, -1},              // pattern16
        {0, 1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern3
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern24
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 0, 2, 3, 3, 2, 4, -1, -1, -1, -1, -1, -1, -1},        // pattern12
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, 0, 2, 3, 4, 5, 2, 5, 3, 2, -1, -1, -1, -1},           // pattern20
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, 3, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},     // pattern17
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},  // pattern1
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    };

    // edge index to vertex index
    const int MarchingCubes::kEdgeVertexIndexTable[12][2] = {
        {0, 1},
        {1, 2},
        {2, 3},
        {3, 0},
        {4, 5},
        {5, 6},
        {6, 7},
        {7, 4},
        {0, 4},
        {1, 5},
        {2, 6},
        {3, 7},
    };

    const int MarchingCubes::kCubeVertexCodes[8][3] = {
        {0, 0, 0},
        {1, 0, 0},
        {0, 1, 0},
        {1, 1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {0, 1, 1},
        {1, 1, 1},
    };

    // to locate an edge, we need the origin (cube) coords (i, j, k) and the direction (x, y, z).
    const int MarchingCubes::kCubeEdgeCodes[12][4] = {
        {0, 0, 0, 0},  // edge 0, (i, j, k, 0), where 0 means x.
        {1, 0, 0, 1},  // edge 1, (i + 1, j, k, 1), where 1 means y.
        {0, 1, 0, 0},  // edge 2, (i, j + 1, k, 0), where 0 means x.
        {0, 0, 0, 1},
        {0, 0, 1, 0},
        {1, 0, 1, 1},
        {0, 1, 1, 0},
        {0, 0, 1, 1},
        {0, 0, 0, 2},
        {1, 0, 0, 2},
        {1, 1, 0, 2},
        {0, 1, 0, 2},
    };

    void
    MarchingCubes::ComputeTriangleUniqueEdgeIndexTable() {
        std::set<int> unique_indices;
        for (const auto &edge_indices: MarchingCubes::kTriangleEdgeIndexTable) {
            unique_indices.clear();
            for (int edge_index: edge_indices) {
                if (edge_index == -1) { break; }
                unique_indices.insert(edge_index);
            }

            std::cout << '{';
            for (const auto j: unique_indices) { std::cout << j << ", "; }
            for (std::size_t j = 0; j < 14 - unique_indices.size(); ++j) {
                std::cout << -1 << ", ";
            }
            std::cout << "-1}," << std::endl;
        }
    }

    void
    MarchingCubes::ComputeTriangleVertexIndexTable() {
        std::map<long, std::size_t> unique_indices;
        for (const auto &edge_indices: MarchingCubes::kTriangleEdgeIndexTable) {
            unique_indices.clear();
            for (const int edge_index: edge_indices) {
                if (edge_index == -1) { break; }
                unique_indices.try_emplace(edge_index, unique_indices.size());
            }

            std::cout << '{';
            long m = 0;
            for (long k: edge_indices) {
                auto it = unique_indices.find(k);
                if (it == unique_indices.end()) {
                    std::cout << -1;
                    break;
                }
                std::cout << it->second << ", ";
                ++m;
            }
            for (long j = 1; j < 16 - m; ++j) { std::cout << ", -1"; }
            std::cout << "}," << std::endl;
        }
    }

    template<typename Dtype>
    int
    CalculateVertexConfigIndex(const Dtype *vertex_sdf) {
        // binary coding of vertex_sdf
        return (vertex_sdf[0] < 0.0f ? (1 << 0) : 0) |  //
               (vertex_sdf[1] < 0.0f ? (1 << 1) : 0) |  //
               (vertex_sdf[2] < 0.0f ? (1 << 2) : 0) |  //
               (vertex_sdf[3] < 0.0f ? (1 << 3) : 0) |  //
               (vertex_sdf[4] < 0.0f ? (1 << 4) : 0) |  //
               (vertex_sdf[5] < 0.0f ? (1 << 5) : 0) |  //
               (vertex_sdf[6] < 0.0f ? (1 << 6) : 0) |  //
               (vertex_sdf[7] < 0.0f ? (1 << 7) : 0);
    }

    template<typename Dtype>
    void
    InterpolateEdgeVertex(
        const Dtype *v1,
        const Dtype *v2,
        const Dtype sdf1,
        const Dtype sdf2,
        Dtype *edge_vertex) {
        constexpr Dtype kEpsilon = 1e-6;
        const Dtype sdf_diff = sdf1 - sdf2;
        if (std::abs(sdf_diff) >= kEpsilon) {
            // linear interpolation
            // p = v2 - sdf2 * r, where r = (v1 - v2) / (sdf1 - sdf2).
            // p = (sdf1 * vertex2 - sdf2 * vertex1) / (sdf1 - sdf2)
            //   = v1 + t * (v2 - v1), where t = sdf1 / (sdf1 - sdf2)
            const Dtype t = sdf1 / sdf_diff;
            edge_vertex[0] = v1[0] + t * (v2[0] - v1[0]);
            edge_vertex[1] = v1[1] + t * (v2[1] - v1[1]);
            edge_vertex[2] = v1[2] + t * (v2[2] - v1[2]);
            return;
        }
        edge_vertex[0] = (v1[0] + v2[0]) * 0.5f;
        edge_vertex[1] = (v1[1] + v2[1]) * 0.5f;
        edge_vertex[2] = (v1[2] + v2[2]) * 0.5f;
    }

    template<typename Dtype>
    void
    MarchingSingleCubeImpl(
        const Eigen::Ref<const Eigen::Matrix<Dtype, 3, 8>> &vertex_coords,
        const Eigen::Ref<const Eigen::Vector<Dtype, 8>> &sdf_values,
        std::vector<Eigen::Vector3<Dtype>> &vertices,
        std::vector<Eigen::Vector3i> &triangles,
        std::vector<Eigen::Vector3<Dtype>> &face_normals) {

        vertices.clear();
        face_normals.clear();
        triangles.clear();

        const int cfg_index = CalculateVertexConfigIndex<Dtype>(sdf_values.data());
        if (cfg_index == 0 || cfg_index == 255) { return; }  // no triangle

        // interpolate the edge vertices
        Eigen::Matrix<Dtype, 3, 12> edge_vertices;
        int col = 0;
        vertices.reserve(12);
        const int *unique_edge_indices = MarchingCubes::kTriangleUniqueEdgeIndexTable[cfg_index];
        while (unique_edge_indices[col] != -1) {
            const int &edge_index = unique_edge_indices[col];
            const auto [vid1, vid2] = MarchingCubes::kEdgeVertexIndexTable[edge_index];
            InterpolateEdgeVertex(
                vertex_coords.col(vid1).data(),
                vertex_coords.col(vid2).data(),
                sdf_values[vid1],
                sdf_values[vid2],
                edge_vertices.col(col).data());
            vertices.push_back(edge_vertices.col(col));
            ++col;
        }

        // collect the triangles and calculate the vertex normals
        face_normals.reserve(5);
        triangles.reserve(5);
        col = 0;
        const int *vertex_indices = MarchingCubes::kTriangleVertexIndexTable[cfg_index];
        while (vertex_indices[col] != -1) {
            triangles.emplace_back(
                vertex_indices[col + 2],
                vertex_indices[col + 1],
                vertex_indices[col]);
            const Eigen::Vector3<Dtype> &p0 = vertices[vertex_indices[col + 2]];
            const Eigen::Vector3<Dtype> &p1 = vertices[vertex_indices[col + 1]];
            const Eigen::Vector3<Dtype> &p2 = vertices[vertex_indices[col]];
            const Eigen::Vector3<Dtype> px = p1 - p0;
            const Eigen::Vector3<Dtype> py = p2 - p0;
            face_normals.emplace_back(px.cross(py).normalized());
            col += 3;
        }
    }

    template<typename Dtype>
    void
    MarchingCubesImpl(
        const Eigen::Ref<const Eigen::Vector3<Dtype>> &grid_min,
        const Eigen::Ref<const Eigen::Vector3<Dtype>> &grid_res,
        const Eigen::Ref<const Eigen::Vector3i> &grid_shape,
        const Eigen::Ref<const Eigen::VectorX<Dtype>> &sdf_values,
        std::vector<Eigen::Vector3<Dtype>> &vertices,
        std::vector<Eigen::Vector3i> &triangles,
        std::vector<Eigen::Vector3<Dtype>> &face_normals,
        const bool parallel) {
        // 0. interpolate edge vertices;
        // 1. calculate the vertex config index of each cube;
        // 2. collect cubes whose vertex config index is not 0 nor 255;
        // 3. calculate the extracted mesh vertices, normals and indices for each cube;
        // 3.1. interpolate the edge vertices;
        // 3.2. collect the triangles;
        // 3.3. calculate the vertex normals;

        using namespace common;
        using MC = MarchingCubes;
        const Eigen::Vector3i grid_strides = ComputeCStrides<int>(grid_shape, 1);
        const Eigen::Vector3i edge_strides = grid_strides.array() * 3;
        const int ab = grid_shape[0] * grid_shape[1];
        const int bc = grid_shape[1] * grid_shape[2];
        const int ac = grid_shape[0] * grid_shape[2];
        const int abc = ab * grid_shape[2];
        const int max_num_edges = 3 * abc - ab - bc - ac;

        auto get_edge_hash =
            [&edge_strides](const Eigen::Vector3i &cube_coords, const int cube_edge_idx) {
                return edge_strides.dot(cube_coords) + cube_edge_idx;
            };

        absl::flat_hash_map<int, Eigen::Vector3<Dtype>> edge_vertices;
        edge_vertices.reserve(max_num_edges);

        // compute cube cfg indices
        struct ValidCube {
            Eigen::Vector3i coords{};
            int cfg_index = 0;
            std::vector<Eigen::Vector3i> edges{};  // edge hash, v1, v2
        };

        std::vector<std::vector<ValidCube>> valid_cubes_vec(grid_shape[0] - 1);
#pragma omp parallel for if (parallel) default(none)
        for (int i = 0; i < grid_shape[0] - 1; ++i) {
            std::vector<ValidCube> &valid_cubes = valid_cubes_vec[i];
            valid_cubes.reserve(1024);
            for (int j = 0; j < grid_shape[1] - 1; ++j) {
                for (int k = 0; k < grid_shape[2] - 1; ++k) {
                    // get the cfg index
                    Dtype vertex_sdf[8];
                    int vertex_indices[8];  // global indices
                    for (int l = 0; l < 8; ++l) {
                        const int *code = MC::kCubeVertexCodes[l];
                        int &vertex_gid = vertex_indices[l];
                        Eigen::Vector3i vertex_index(i + code[0], j + code[1], k + code[2]);
                        vertex_gid = vertex_index.dot(grid_strides);
                        vertex_sdf[l] = sdf_values[vertex_gid];
                    }
                    const int cfg_index = CalculateVertexConfigIndex<Dtype>(vertex_sdf);
                    if (cfg_index == 0 || cfg_index == 255) { continue; }
                    ValidCube valid_cube{{i, j, k}, cfg_index, {}};
                    valid_cube.edges.reserve(12);
                    // get the edges that we are going to interpolate.
                    const int *unique_edge_indices = MC::kTriangleUniqueEdgeIndexTable[cfg_index];
                    int col = 0;
                    while (unique_edge_indices[col] != -1) {
                        const int &edge_index = unique_edge_indices[col];
                        // get the vertex indices of the edge.
                        auto [v1, v2] = MC::kEdgeVertexIndexTable[edge_index];
                        v1 = vertex_indices[v1];  // convert to global indices.
                        v2 = vertex_indices[v2];  // convert to global indices.
                        // get the edge hash.
                        const int *edge_code = MC::kCubeEdgeCodes[edge_index];
                        Eigen::Vector3i cube(edge_code[0] + i, edge_code[1] + j, edge_code[2] + k);
                        const int edge_hash = cube.dot(edge_strides) + edge_code[3];
                        valid_cube.edges.emplace_back(edge_hash, v1, v2);
                        ++col;
                    }
                    valid_cubes.emplace_back(std::move(valid_cube));
                }
            }
        }

        // collect unique edges
        const std::size_t num_valid_cubes = std::accumulate(
            valid_cubes_vec.begin(),
            valid_cubes_vec.end(),
            0,
            [](int sum, const std::vector<ValidCube> &cubes) { return sum + cubes.size(); });
        absl::flat_hash_map<int, int> edge_to_vertex_index;
        edge_to_vertex_index.reserve(num_valid_cubes * 12);
        std::vector<Eigen::Vector3i> unique_edges;
        unique_edges.reserve(edge_to_vertex_index.capacity());
        int edge_cnt = 0;
        int face_cnt = 0;
        for (const std::vector<ValidCube> &cubes: valid_cubes_vec) {
            for (const ValidCube &cube: cubes) {
                for (const Eigen::Vector3i &edge: cube.edges) {
                    if (!edge_to_vertex_index.try_emplace(edge[0], edge_cnt).second) { continue; }
                    unique_edges.push_back(edge);
                    ++edge_cnt;
                    face_cnt += MC::kTriangleCountTable[cube.cfg_index];
                }
            }
        }

        // interpolate the edge vertices
        vertices.clear();
        vertices.resize(edge_cnt);
#pragma omp parallel for if (parallel) default(none)
        for (const Eigen::Vector3i &edge: unique_edges) {
            const int v1x = edge[1] / grid_strides[0];
            int rem = edge[1] % grid_strides[0];
            const int v1y = rem / grid_strides[1];
            const int v1z = rem % grid_strides[1];  // assume grid_strides[2] = 1
            Dtype v1[3] = {
                VertexIndexToMeter<Dtype>(v1x, grid_min[0], grid_res[0]),
                VertexIndexToMeter<Dtype>(v1y, grid_min[1], grid_res[1]),
                VertexIndexToMeter<Dtype>(v1z, grid_min[2], grid_res[2]),
            };
            const int v2x = edge[2] / grid_strides[0];
            rem = edge[2] % grid_strides[0];
            const int v2y = rem / grid_strides[1];
            const int v2z = rem % grid_strides[1];  // assume grid_strides[2] = 1
            Dtype v2[3] = {
                VertexIndexToMeter<Dtype>(v2x, grid_min[0], grid_res[0]),
                VertexIndexToMeter<Dtype>(v2y, grid_min[1], grid_res[1]),
                VertexIndexToMeter<Dtype>(v2z, grid_min[2], grid_res[2]),
            };
            const Dtype sdf1 = sdf_values[edge[1]];
            const Dtype sdf2 = sdf_values[edge[2]];
            const int vid = edge_to_vertex_index[edge[0]];
            Dtype *vertex_coords = vertices[vid].data();
            InterpolateEdgeVertex(v1, v2, sdf1, sdf2, vertex_coords);
        }

        triangles.clear();
        face_normals.clear();
        triangles.reserve(face_cnt);
        face_normals.reserve(face_cnt);
        for (const std::vector<ValidCube> &cubes: valid_cubes_vec) {
            for (const ValidCube &cube: cubes) {
                const int *vertex_indices = MC::kTriangleVertexIndexTable[cube.cfg_index];
                int col = 0;
                while (vertex_indices[col] != -1) {
                    int v1 = cube.edges[vertex_indices[col + 2]][0];
                    int v2 = cube.edges[vertex_indices[col + 1]][0];
                    int v3 = cube.edges[vertex_indices[col]][0];
                    v1 = edge_to_vertex_index[v1];
                    v2 = edge_to_vertex_index[v2];
                    v3 = edge_to_vertex_index[v3];
                    triangles.emplace_back(v1, v2, v3);
                    const Eigen::Vector3<Dtype> &p0 = vertices[v1];
                    const Eigen::Vector3<Dtype> &p1 = vertices[v2];
                    const Eigen::Vector3<Dtype> &p2 = vertices[v3];
                    const Eigen::Vector3<Dtype> px = p1 - p0;
                    const Eigen::Vector3<Dtype> py = p2 - p0;
                    face_normals.emplace_back(px.cross(py).normalized());
                    col += 3;
                }
            }
        }
    }

    void
    MarchingCubes::Run(
        const Eigen::Ref<const Eigen::Matrix<double, 3, 8>> &vertex_coords,
        const Eigen::Ref<const Eigen::Vector<double, 8>> &sdf_values,
        std::vector<Eigen::Vector3d> &vertices,
        std::vector<Eigen::Vector3i> &triangles,
        std::vector<Eigen::Vector3d> &face_normals) {
        MarchingSingleCubeImpl(vertex_coords, sdf_values, vertices, triangles, face_normals);
    }

    void
    MarchingCubes::Run(
        const Eigen::Ref<const Eigen::Matrix<float, 3, 8>> &vertex_coords,
        const Eigen::Ref<const Eigen::Vector<float, 8>> &sdf_values,
        std::vector<Eigen::Vector3f> &vertices,
        std::vector<Eigen::Vector3i> &triangles,
        std::vector<Eigen::Vector3f> &face_normals) {
        MarchingSingleCubeImpl(vertex_coords, sdf_values, vertices, triangles, face_normals);
    }

}  // namespace erl::geometry
